from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.contrib import messages
from django.http import HttpResponse

from auth_app.models import PerfilUsuario
from forum.models import Foro
from .models import MaterialDidactico
from .models import Curso, Inscripcion, MaterialDidactico
from .forms import MaterialForm
from django.shortcuts import render, redirect
from auth_app.models import PerfilUsuario 
from django.contrib import messages
from django.shortcuts import get_object_or_404
from forum.models import Foro
from .forms import EvaluacionForm
from .models import Evaluacion
from django.db import models
from .forms import CursoForm
import os
from django.http import JsonResponse
from django.contrib.auth.models import User

# ---------------------------
# Redirecci√≥n seg√∫n el rol
# ---------------------------
@login_required
def dashboard_view(request):
    user = request.user

    if user.is_superuser or user.is_staff:
        return redirect('dashboard:dashboard_admin')
    elif hasattr(user, "perfilusuario") and getattr(user.perfilusuario, "is_teacher", False):
        return redirect('dashboard:dashboard_profesor')
    else:
        return redirect('dashboard:dashboard_user')


# ---------------------------
# DASHBOARD: ADMINISTRADOR
# ---------------------------
@login_required
def dashboard_admin(request):
    if not request.user.is_staff:
        messages.error(request, "‚ùå No tienes permisos para acceder al panel de administraci√≥n.")
        return redirect('dashboard:dashboard_user')

    total_usuarios = User.objects.count()
    total_profesores = PerfilUsuario.objects.filter(is_teacher=True).count()
    total_cursos = 8  # temporalmente est√°tico, puedes cambiarlo seg√∫n tu modelo real

    context = {
        "total_usuarios": total_usuarios,
        "total_profesores": total_profesores,
        "total_cursos": total_cursos,
    }
    return render(request, "dashboard_admin.html", context)


'''@login_required
def admin_usuarios(request):
    usuarios = User.objects.all().select_related("perfilusuario")
    return render(request, "admin_usuarios.html", {"usuarios": usuarios})'''

def admin_usuarios(request):
    # Traemos todos los usuarios con su perfil
    usuarios = PerfilUsuario.objects.select_related('user').all()
    return render(request, "admin_usuarios.html", {"usuarios": usuarios})

'''@login_required
def admin_cursos(request):
    cursos = [
        {"nombre": "Matem√°ticas I", "profesor": "Juan P√©rez", "alumnos": 30},
        {"nombre": "Historia Universal", "profesor": "Mar√≠a L√≥pez", "alumnos": 25},
    ]
    return render(request, "admin_cursos.html", {"cursos": cursos})'''
@login_required
def admin_cursos(request):
    # Traemos todos los cursos
    cursos = Curso.objects.select_related('profesor').all()
    return render(request, "admin_cursos.html", {"cursos": cursos})

@login_required
def admin_estadisticas(request):
    data = {
        "usuarios": User.objects.count(),
        "profesores": PerfilUsuario.objects.filter(is_teacher=True).count(),
    }
    return render(request, "admin_estadisticas.html", data)


# ---------------------------
# DASHBOARD: PROFESOR
# ---------------------------
@login_required
def dashboard_profesor(request):
    profesor = request.user

    # Cursos activos creados por el profesor
    cursos_activos = Curso.objects.filter(profesor=profesor).count()

    # Alumnos inscritos en los cursos del profesor
    alumnos_inscritos = Inscripcion.objects.filter(curso__profesor=profesor).count()

    # Materiales subidos por el profesor
    materiales_subidos = MaterialDidactico.objects.filter(profesor=profesor).count()

    # (Opcional) Tareas revisadas ‚Äî si tienes modelo de tareas, aqu√≠ podr√≠as agregarlo
    tareas_revisadas = 0  # Por ahora lo dejamos en 0 si a√∫n no existe ese modelo

    context = {
        "cursos_activos": cursos_activos,
        "alumnos_inscritos": alumnos_inscritos,
        "tareas_revisadas": tareas_revisadas,
        "material_subido": materiales_subidos,
    }

    return render(request, "dashboard_profesor.html", context)



@login_required
def profesor_cursos(request):
    """
    Muestra los cursos creados por el profesor logueado.
    """
    cursos = Curso.objects.filter(profesor=request.user).order_by("-id")
    return render(request, "profesor_cursos.html", {"cursos": cursos})



@login_required
def profesor_evaluaciones(request):
    evaluaciones = [
        {"nombre": "Examen 1", "curso": "Matem√°ticas I", "fecha": "2025-10-15"},
        {"nombre": "Examen 2", "curso": "Historia", "fecha": "2025-10-20"},
    ]
    return render(request, "profesor_evaluaciones.html", {"evaluaciones": evaluaciones})


@login_required
def profesor_material(request):
    materiales = [
        {"titulo": "Apuntes Matem√°ticas", "curso": "Matem√°ticas I"},
        {"titulo": "Libro Historia", "curso": "Historia"},
    ]
    return render(request, "profesor_material.html", {"materiales": materiales})

@login_required
def profesor_material(request):
    # üîπ Mostrar materiales del profesor
    materiales = MaterialDidactico.objects.filter(profesor=request.user).order_by('-fecha_subida')

    # üîπ Traer cursos del profesor para el selector
    cursos = Curso.objects.filter(profesor=request.user)

    if request.method == 'POST':
        form = MaterialForm(request.POST, request.FILES)
        if form.is_valid():
            material = form.save(commit=False)
            material.profesor = request.user

            # üîπ Asociar el curso seleccionado (si existe)
            curso_id = request.POST.get('curso')
            if curso_id:
                try:
                    material.curso = Curso.objects.get(id=curso_id, profesor=request.user)
                except Curso.DoesNotExist:
                    material.curso = None

            # üîπ Detectar tipo autom√°ticamente
            archivo = material.archivo
            if archivo:
                ext = os.path.splitext(archivo.name)[1].lower()
                if ext in ['.pdf']:
                    material.tipo = 'PDF'
                elif ext in ['.ppt', '.pptx']:
                    material.tipo = 'Presentaci√≥n'
                elif ext in ['.mp4', '.mov', '.avi']:
                    material.tipo = 'Video'
                elif ext in ['.doc', '.docx']:
                    material.tipo = 'Documento'
                else:
                    material.tipo = 'Otro'
            elif material.enlace:
                material.tipo = 'Enlace'
            else:
                material.tipo = 'Otro'

            material.save()
            messages.success(request, "‚úÖ Material subido correctamente.")
            return redirect('dashboard:profesor_material')
    else:
        form = MaterialForm()

    # üîπ Enviar cursos al template (√∫nico return)
    return render(request, 'profesor_material.html', {
        'form': form,
        'materiales': materiales,
        'cursos': cursos
    })

@login_required
def editar_material_view(request, id):
    material = get_object_or_404(MaterialDidactico, id=id, profesor=request.user)
    if request.method == 'POST':
        material.titulo = request.POST.get('titulo')
        material.tipo = request.POST.get('tipo')
        if request.FILES.get('archivo'):
            material.archivo = request.FILES['archivo']
        material.enlace = request.POST.get('enlace')
        material.save()
        messages.success(request, "‚úÖ Material actualizado correctamente.")
        return redirect('dashboard:profesor_material')
    return render(request, 'editar_material.html', {'material': material})


@login_required
def eliminar_material_view(request, id):
    material = get_object_or_404(MaterialDidactico, id=id, profesor=request.user)
    material.delete()
    messages.success(request, "üóëÔ∏è Material eliminado correctamente.")
    return redirect('dashboard:profesor_material')


@login_required
def foros_profesor(request):
    foros = Foro.objects.all().order_by('-fecha_creacion')
    return render(request, 'foros_profesor.html', {'foros': foros})


# ---------------------------
# DASHBOARD: USUARIO
# ---------------------------
@login_required
def dashboard_user(request):
    return render(request, "dashboard_user.html")

@login_required
def crear_curso(request):
    """
    Vista para que el profesor cree un nuevo curso.
    """
    if not request.user.is_staff:
        messages.error(request, "No tienes permiso para crear cursos.")
        return redirect("dashboard_user")

    if request.method == "POST":
        nombre = request.POST.get("nombre")
        descripcion = request.POST.get("descripcion")
        categoria = request.POST.get("categoria")

        if not nombre or not descripcion:
            messages.error(request, "Por favor completa todos los campos.")
            return redirect("crear_curso")

        # Crear curso asociado al profesor
        Curso.objects.create(
            nombre=nombre,
            descripcion=descripcion,
            categoria=categoria,
            profesor=request.user
        )

        messages.success(request, "üìò Curso creado correctamente.")
        return redirect("dashboard_profesor")

    return render(request, "crear_curso.html")


# üë®‚Äçüéì Vista del alumno: ver cursos disponibles
@login_required
def cursos_disponibles(request):
    cursos = Curso.objects.exclude(inscritos__alumno=request.user)
    return render(request, "cursos_disponibles.html", {"cursos": cursos})


# üë®‚Äçüéì Vista del alumno: inscribirse
@login_required
def inscribirse_curso(request, curso_id):
    curso = get_object_or_404(Curso, id=curso_id)
    Inscripcion.objects.get_or_create(alumno=request.user, curso=curso)
    messages.success(request, f"‚úÖ Te has inscrito en {curso.nombre}.")
    return redirect("cursos_disponibles")

# üë®‚Äçüéì Vista del alumno: ver mis recursos
@login_required
def mis_recursos(request):
    cursos_inscritos = Curso.objects.filter(inscritos__alumno=request.user)
    materiales = MaterialDidactico.objects.filter(curso__in=cursos_inscritos)
    return render(request, "mis_recursos.html", {"materiales": materiales})

@login_required
def detalle_curso(request, curso_id):
    """
    Vista para mostrar detalles de un curso, alumnos inscritos
    y permitir al profesor subir materiales con detecci√≥n autom√°tica de tipo.
    """
    curso = get_object_or_404(Curso, id=curso_id, profesor=request.user)
    materiales = MaterialDidactico.objects.filter(curso=curso)

    # üîπ Alumnos inscritos (seg√∫n la tabla Inscripcion)
    try:
        alumnos = Inscripcion.objects.filter(curso=curso).select_related('alumno')
    except:
        alumnos = []

    if request.method == "POST":
        form = MaterialForm(request.POST, request.FILES)
        if form.is_valid():
            material = form.save(commit=False)
            material.curso = curso
            material.profesor = request.user

            # üîπ Detecci√≥n autom√°tica del tipo de archivo
            archivo = request.FILES.get("archivo", None)
            enlace = request.POST.get("enlace", "")

            if archivo:
                extension = os.path.splitext(archivo.name)[1].lower()

                if extension in [".pdf"]:
                    material.tipo = "PDF"
                elif extension in [".doc", ".docx"]:
                    material.tipo = "Documento Word"
                elif extension in [".ppt", ".pptx"]:
                    material.tipo = "Presentaci√≥n PowerPoint"
                elif extension in [".xls", ".xlsx"]:
                    material.tipo = "Hoja de c√°lculo"
                elif extension in [".jpg", ".jpeg", ".png"]:
                    material.tipo = "Imagen"
                elif extension in [".mp4", ".avi", ".mov", ".mkv"]:
                    material.tipo = "Video"
                elif extension in [".mp3", ".wav"]:
                    material.tipo = "Audio"
                elif extension in [".txt"]:
                    material.tipo = "Texto"
                else:
                    material.tipo = f"Archivo ({extension})"
            elif enlace:
                material.tipo = "Enlace web"
            else:
                material.tipo = "Otro"

            material.save()
            messages.success(request, "‚úÖ Material subido correctamente.")
            return redirect("detalle_curso", curso_id=curso.id)
    else:
        form = MaterialForm()

    context = {
        "curso": curso,
        "materiales": materiales,
        "alumnos": alumnos,
        "form": form
    }
    return render(request, "detalle_curso.html", context)

@login_required
def editar_curso(request, curso_id):
    """
    Permite al profesor editar la informaci√≥n de un curso existente.
    """
    curso = get_object_or_404(Curso, id=curso_id, profesor=request.user)

    if request.method == "POST":
        form = CursoForm(request.POST, instance=curso)
        if form.is_valid():
            form.save()
            messages.success(request, "‚úÖ El curso se actualiz√≥ correctamente.")
            return redirect("dashboard:profesor_cursos")
    else:
        form = CursoForm(instance=curso)

    context = {
        "form": form,
        "curso": curso
    }
    return render(request, "editar_curso.html", context)


@login_required
def asignar_material_a_curso(request, material_id):
    try:
        material = MaterialDidactico.objects.get(id=material_id, profesor=request.user)
    except MaterialDidactico.DoesNotExist:
        messages.error(request, "‚ùå No se encontr√≥ el material.")
        return redirect('profesor_material')

    if request.method == 'POST':
        curso_id = request.POST.get('curso')
        try:
            curso = Curso.objects.get(id=curso_id, profesor=request.user)
            material.curso = curso
            material.save()
            messages.success(request, f"‚úÖ Material asignado correctamente al curso {curso.nombre}.")
        except Curso.DoesNotExist:
            messages.error(request, "‚ö†Ô∏è Curso no v√°lido.")

    return redirect('profesor_material')

# üìã Mostrar evaluaciones del profesor
@login_required
def profesor_evaluaciones(request):
    evaluaciones = Evaluacion.objects.filter(profesor=request.user).order_by('-fecha')
    return render(request, "profesor_evaluaciones.html", {"evaluaciones": evaluaciones})


# ‚ûï Crear evaluaci√≥n
# ‚ûï Crear evaluaci√≥n
@login_required
def crear_evaluacion(request):
    # üîπ Obtener solo los cursos del profesor actual
    cursos = Curso.objects.filter(profesor=request.user)

    if request.method == 'POST':
        form = EvaluacionForm(request.POST)
        if form.is_valid():
            evaluacion = form.save(commit=False)
            evaluacion.profesor = request.user
            evaluacion.save()
            messages.success(request, "‚úÖ Evaluaci√≥n creada correctamente.")
            return redirect('dashboard:profesor_evaluaciones')
    else:
        form = EvaluacionForm()

    # üîπ Limitar el campo 'curso' a los cursos del profesor logueado
    form.fields['curso'].queryset = cursos

    # üîπ Enviar cursos (por si se usan en el template)
    return render(request, 'crear_evaluacion.html', {'form': form, 'cursos': cursos})



# ‚úèÔ∏è Editar evaluaci√≥n
@login_required
def editar_evaluacion(request, evaluacion_id):
    evaluacion = get_object_or_404(Evaluacion, id=evaluacion_id, profesor=request.user)
    cursos = Curso.objects.filter(profesor=request.user)

    if request.method == 'POST':
        form = EvaluacionForm(request.POST, instance=evaluacion)
        if form.is_valid():
            form.save()
            messages.success(request, "‚úÖ Evaluaci√≥n actualizada correctamente.")
            return redirect('dashboard:profesor_evaluaciones')
    else:
        form = EvaluacionForm(instance=evaluacion)

    form.fields['curso'].queryset = cursos
    return render(request, 'editar_evaluacion.html', {'form': form, 'evaluacion': evaluacion})


# üóëÔ∏è Eliminar evaluaci√≥n
@login_required
def eliminar_evaluacion(request, evaluacion_id):
    evaluacion = get_object_or_404(Evaluacion, id=evaluacion_id, profesor=request.user)
    evaluacion.delete()
    messages.success(request, "üóëÔ∏è Evaluaci√≥n eliminada correctamente.")
    return redirect('dashboard:profesor_evaluaciones')

@login_required
def detalle_evaluacion(request, evaluacion_id):
    """
    Muestra el detalle de una evaluaci√≥n y permite agregar materiales del curso a esta evaluaci√≥n espec√≠fica.
    """
    evaluacion = get_object_or_404(Evaluacion, id=evaluacion_id, profesor=request.user)
    curso = evaluacion.curso

    # üîπ Materiales ya asociados a esta evaluaci√≥n
    materiales_asignados = evaluacion.materiales.all()

    # üîπ Materiales disponibles para agregar (del curso del profesor)
    materiales_disponibles = MaterialDidactico.objects.filter(curso=curso, profesor=request.user)

    # üîπ Agregar material seleccionado a la evaluaci√≥n
    if request.method == "POST":
        material_id = request.POST.get("material_id")
        if material_id:
            try:
                material = MaterialDidactico.objects.get(id=material_id, curso=curso, profesor=request.user)
                evaluacion.materiales.add(material)
                messages.success(request, f"üìò El material '{material.titulo}' se agreg√≥ a la evaluaci√≥n correctamente.")
            except MaterialDidactico.DoesNotExist:
                messages.error(request, "‚ùå El material seleccionado no existe o no pertenece a este curso.")
        return redirect("dashboard:detalle_evaluacion", evaluacion_id=evaluacion.id)

    context = {
        "evaluacion": evaluacion,
        "curso": curso,
        "materiales_asignados": materiales_asignados,
        "materiales_disponibles": materiales_disponibles,
    }
    return render(request, "detalle_evaluacion.html", context)

@login_required
def quitar_material_evaluacion(request, evaluacion_id, material_id):
    """
    Elimina la relaci√≥n entre un material y una evaluaci√≥n (sin borrar el archivo).
    """
    evaluacion = get_object_or_404(Evaluacion, id=evaluacion_id, profesor=request.user)
    try:
        material = evaluacion.materiales.get(id=material_id)
        evaluacion.materiales.remove(material)
        messages.success(request, f"üóëÔ∏è El material '{material.titulo}' se quit√≥ de la evaluaci√≥n.")
    except MaterialDidactico.DoesNotExist:
        messages.error(request, "‚ùå El material no pertenece a esta evaluaci√≥n.")

    return redirect("detalle_evaluacion", evaluacion_id=evaluacion.id)

def ai_stats_api(request):
    total_users = User.objects.count()
    total_students = User.objects.filter(groups__name='Alumno').count()
    total_teachers = User.objects.filter(groups__name='Profesor').count()
    total_admins = User.objects.filter(is_staff=True).count()

    data = {
        'total_users': total_users,
        'students': total_students,
        'teachers': total_teachers,
        'admins': total_admins
    }
    return JsonResponse(data)


from django.contrib.admin.views.decorators import staff_member_required
from django.shortcuts import render
from django.contrib.auth.models import User

@staff_member_required
def admin_distribution_view(request):
    total_users = User.objects.count()
    students = User.objects.filter(groups__name='Alumno').count()
    teachers = User.objects.filter(groups__name='Profesor').count()
    admins = User.objects.filter(is_staff=True).count()

    context = {
        'total_users': total_users,
        'students': students,
        'teachers': teachers,
        'admins': admins
    }
    return render(request, 'admin_dashboard.html', context)

from django.views.decorators.csrf import csrf_exempt
import json

@csrf_exempt
def ai_chat_api(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user_message = data.get('message', '').lower()
        # Aqu√≠ puedes mejorar la l√≥gica con IA real m√°s adelante
        if "hola" in user_message:
            reply = "¬°Hola! Soy tu asistente de EduConnect ü§ñ. ¬øEn qu√© puedo ayudarte hoy?"
        elif "ayuda" in user_message:
            reply = "Puedo ayudarte a entender tus tareas, revisar tus clases o mostrar estad√≠sticas."
        else:
            reply = "No entend√≠ bien eso üòÖ, ¬øpuedes reformularlo?"
        return JsonResponse({'reply': reply})

from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

@csrf_exempt
def ai_recommendations_api(request):
    """
    API sencilla de recomendaciones IA.
    Profesores y alumnos recibir√°n sugerencias personalizadas
    seg√∫n su tipo de usuario.
    """
    if not request.user.is_authenticated:
        return JsonResponse({'error': 'No autenticado'}, status=401)

    role = "Alumno"
    if request.user.groups.filter(name="Profesor").exists():
        role = "Profesor"
    elif request.user.is_staff:
        role = "Administrador"

    # Ejemplo de recomendaciones simples
    if role == "Profesor":
        recommendations = [
            "üìö Sube tus materiales did√°cticos actualizados.",
            "üß† Usa el chat IA para generar preguntas tipo examen.",
            "üìä Revisa la participaci√≥n de tus alumnos en clase."
        ]
    elif role == "Alumno":
        recommendations = [
            "üïí No olvides revisar tus tareas pendientes.",
            "ü§ñ Usa el chat IA para estudiar temas dif√≠ciles.",
            "üí° Participa en los foros para subir tu calificaci√≥n."
        ]
    else:
        recommendations = [
            "üß≠ Administra usuarios desde el panel de control.",
            "üìà Consulta la distribuci√≥n de usuarios.",
            "üß© Supervisa las interacciones de IA."
        ]

    return JsonResponse({
        'role': role,
        'recommendations': recommendations
    })

from django.contrib.auth.decorators import user_passes_test
from django.contrib.auth.models import User
from django.db.models import Count
from django.shortcuts import render

@user_passes_test(lambda u: u.is_staff)
def admin_user_distribution(request):
    """
    Vista exclusiva para el administrador.
    Muestra la distribuci√≥n de usuarios (alumnos, profesores y admin)
    mediante una gr√°fica Plotly.
    """
    # Obtener conteo por tipo de usuario
    total_users = User.objects.count()
    total_staff = User.objects.filter(is_staff=True).count()
    total_professors = User.objects.filter(groups__name='Profesor').count()
    total_students = total_users - total_staff - total_professors

    # Datos para Plotly
    data = {
        "labels": ["Administradores", "Profesores", "Alumnos"],
        "values": [total_staff, total_professors, total_students]
    }

    context = {
        "data": data,
        "total_users": total_users
    }

    return render(request, "user_distribution.html", context)


from django.shortcuts import render
from django.contrib.auth.decorators import user_passes_test
from django.contrib.auth.models import User
import pandas as pd
import plotly.express as px

@user_passes_test(lambda u: u.is_superuser)
def admin_distribution_view(request):
    users = User.objects.all()
    data = {
        'Tipo': ['Superusuario' if u.is_superuser else 'Staff' if u.is_staff else 'Usuario' for u in users]
    }

    df = pd.DataFrame(data)
    fig = px.pie(
        df,
        names='Tipo',
        title='Distribuci√≥n de Usuarios en EduConnect',
        color_discrete_sequence=px.colors.qualitative.Set3,
        hole=0.3
    )
    fig.update_traces(textinfo='percent+label')

    chart_html = fig.to_html(full_html=False)

    return render(request, 'admin_dashboard/distribution.html', {
        'chart_html': chart_html
    })

